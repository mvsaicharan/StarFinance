import { Component, OnInit, ChangeDetectorRef } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Router, RouterLink } from '@angular/router';
import { AuthService, EmployeeProfile } from '../../core/services/auth.service';
import { HttpErrorResponse } from '@angular/common/http';

import { MatDialog } from '@angular/material/dialog';
import { ChangePasswordDialogComponent } from '../../core/dialogs/change-password-dialog'; // <-- Corrected path

// ðŸ’¡ NEW IMPORTS: BehaviorSubject and Observable
import { BehaviorSubject, Observable } from 'rxjs'; 

// Interface for employee data (We assume the profile call returns this)


@Component({
Â  selector: 'app-employee-header',
Â  standalone: true,
Â  imports: [CommonModule, RouterLink],
Â  templateUrl: './employee-header.html',
Â  styleUrls: ['./employee-header.css']
})
export class EmployeeHeader implements OnInit {
Â  userName: string = 'Employee'; 
Â  isDropdownOpen = false;
  employeeRole: string = 'BANK_STAFF';
Â  
Â  // ðŸ’¡ FIX 1: Use BehaviorSubject for the initial state, starting with 'E'
Â  private employeeInitialSubject = new BehaviorSubject<string>('E');
Â  public employeeInitial$: Observable<string> = this.employeeInitialSubject.asObservable(); // Expose as Observable

Â  constructor(
Â  Â  private router: Router,
Â  Â  private authService: AuthService, 
Â  Â  private cdr: ChangeDetectorRef,
Â  Â  private dialog: MatDialog
Â  ) {
Â  }

Â  ngOnInit(): void {
Â  Â  
Â  Â  if (this.authService.getToken()) {
        // ðŸ’¡ FIX 2: Call the correct employee profile service method (assuming it exists)
Â  Â  Â    this.authService.getEmployeeProfile().subscribe({
Â  Â  Â  Â      next: (profile: EmployeeProfile) => {
Â  Â  Â  Â  Â  Â      this.userName = profile.fullName || profile.username || 'Employee'; 
Â  Â  Â  Â  Â  Â      this.employeeRole = profile.role; // ðŸ’¡ MODIFIED: Store the role
Â  Â  Â  Â  Â  Â      this.updateEmployeeInitials(this.userName); // Use the new update method
Â  Â  Â  Â      },
Â  Â  Â  Â      error: (err: HttpErrorResponse) => {
Â  Â  Â  Â  Â  Â      // Set error fallback state
Â  Â  Â  Â  Â  Â      if (err.status === 401) {
Â  Â  Â  Â  Â  Â  Â  Â      this.userName = 'Employee';
                    this.employeeRole = 'BANK_STAFF'; // ðŸ’¡ MODIFIED: Set fallback role
Â  Â  Â  Â  Â  Â  Â  Â      this.authService.logout();
Â  Â  Â  Â  Â  Â  Â  Â      this.router.navigate(['/login']);
Â  Â  Â  Â  Â  Â      } else {
Â  Â  Â  Â  Â  Â  Â  Â      console.error('Error fetching employee profile:', err);
Â  Â  Â  Â  Â  Â  Â  Â      this.userName = 'Staff'; 
                    this.employeeRole = 'BANK_STAFF'; // ðŸ’¡ MODIFIED: Set fallback role
Â  Â  Â  Â  Â  Â      }
Â  Â  Â  Â  Â  Â      this.updateEmployeeInitials(this.userName); // Update initials for fallback name
Â  Â  Â  Â      }
Â  Â  Â    });
Â  Â  } 
    // If no token, the BehaviorSubject stays at its default value 'E', solving the conflict.
Â  }

  /**
   * ðŸ’¡ FIX 3: Extracts the first letter and updates the Subject.
   */
Â  updateEmployeeInitials(name: string): void {
Â  Â  const parts = name.trim().split(/\s+/);
Â  Â  let initials = '';

Â  Â  if (parts.length === 1 && parts[0].length > 0) {
Â  Â  Â  initials = parts[0].charAt(0).toUpperCase();
Â  Â  } else if (parts.length >= 2) {
Â  Â  Â  initials = parts[0].charAt(0).toUpperCase() + parts[1].charAt(0).toUpperCase();
Â  Â  } else {
Â  Â  Â  initials = 'E'; 
Â  Â  }
Â  Â  // Push the new value to the Subject
Â  Â  this.employeeInitialSubject.next(initials);
Â  }

Â  toggleDropdown(): void {
Â  Â  this.isDropdownOpen = !this.isDropdownOpen;
Â  }

isAdmin(): boolean {
      return this.employeeRole === 'BANK_ADMIN';
  }

navigateToCreateEmployee(): void {
      if (this.isAdmin()) {
          this.router.navigate(['/employee/create']); // Define this route in your routing module
      }
  }

Â  openChangePasswordDialog(): void {
Â  Â  this.isDropdownOpen = false; 

Â  Â  // Open the dialog, passing the employee role data
Â  Â  this.dialog.open(ChangePasswordDialogComponent, {
Â  Â  Â  width: '450px',
Â  Â  Â  disableClose: true,
Â  Â  Â  data: { userRole: 'employee' } // Pass data to identify employee role
Â  Â  });
Â  }

Â  logout(): void {
Â  Â  this.authService.logout(); 
Â  Â  this.isDropdownOpen = false;
Â  Â  this.router.navigate(['/login']);
Â  }
}