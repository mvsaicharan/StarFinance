import { Component, OnInit, ChangeDetectorRef } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Router, RouterLink, RouterLinkActive } from '@angular/router';
import { AuthService } from '../../core/services/auth.service';
import { HttpErrorResponse } from '@angular/common/http';

import { MatDialog, MatDialogModule } from '@angular/material/dialog'; 
import { ChangePasswordDialogComponent } from '../../core/dialogs/change-password-dialog'; // <-- Corrected path

// ðŸ’¡ NEW IMPORTS: BehaviorSubject and Observable
import { BehaviorSubject, Observable } from 'rxjs'; 

// Interface for customer data (or import it if defined elsewhere)
interface Customer {
Â  name: string;
Â  // ... other properties
}

@Component({
Â  selector: 'app-header',
Â  standalone: true,
Â  imports: [CommonModule, RouterLink, RouterLinkActive],
Â  templateUrl: './header.html',
Â  styleUrls: ['./header.css']
})
export class Header implements OnInit {
Â  userName: string = 'Guest'; 
Â  isDropdownOpen = false;
  
  // ðŸ’¡ CRITICAL FIX: Use a BehaviorSubject for the initial state
  private userInitialSubject = new BehaviorSubject<string>('G');
  public userInitial$: Observable<string> = this.userInitialSubject.asObservable(); // Expose as Observable

Â  constructor(
Â  Â  private router: Router,
Â  Â  private authService: AuthService, 
Â  Â  private cdr: ChangeDetectorRef,
Â  Â  private dialog: MatDialog
Â  ) {
Â  }

Â  ngOnInit(): void {
Â  Â  
Â  Â  if (this.authService.getToken()) {
Â  Â  Â  this.authService.getCustomerProfile().subscribe({
Â  Â  Â  Â  next: (profile: Customer) => {
            // No setTimeout(0) needed here!
Â  Â  Â  Â  Â  Â  this.userName = profile.name || 'User'; 
Â  Â  Â  Â  Â  Â  this.updateUserInitials(this.userName); // Use the new update method
            // cdr.detectChanges() is now handled by the async pipe
Â  Â  Â  Â  },
Â  Â  Â  Â  error: (err: HttpErrorResponse) => {
            // Set error fallback state
Â  Â  Â  Â  Â  Â  if (err.status === 401) {
Â  Â  Â  Â  Â  Â  Â  Â  this.userName = 'Guest';
Â  Â  Â  Â  Â  Â  Â  Â  this.authService.logout();
Â  Â  Â  Â  Â  Â  Â  Â  this.router.navigate(['/login']);
Â  Â  Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  Â  Â  console.error('Error fetching header profile:', err);
Â  Â  Â  Â  Â  Â  Â  Â  this.userName = 'User'; 
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  this.updateUserInitials(this.userName); // Update initials for fallback name
Â  Â  Â  Â  }
Â  Â  Â  });
Â  Â  } 
    // If no token, the BehaviorSubject stays at its default value 'G', solving the conflict.
Â  }

Â  /**
Â  Â * Extracts the first letter and updates the Subject.
Â  Â */
Â  updateUserInitials(name: string): void {
Â  Â  const parts = name.trim().split(/\s+/);
Â  Â  let initials = '';

Â  Â  if (parts.length === 1 && parts[0].length > 0) {
Â  Â  Â  initials = parts[0].charAt(0).toUpperCase();
Â  Â  } else if (parts.length >= 2) {
Â  Â  Â  initials = parts[0].charAt(0).toUpperCase() + parts[1].charAt(0).toUpperCase();
Â  Â  } else {
Â  Â  Â  initials = 'G'; 
Â  Â  }
Â  Â  // Push the new value to the Subject
Â  Â  this.userInitialSubject.next(initials);
Â  }

Â  toggleDropdown(): void {
Â  Â  this.isDropdownOpen = !this.isDropdownOpen;
Â  }

Â  openChangePasswordDialog(): void {
Â  Â  this.isDropdownOpen = false; 

Â  Â  const dialogRef = this.dialog.open(ChangePasswordDialogComponent, {
Â  Â  Â  width: '450px',
Â  Â  Â  disableClose: true,
      data: { userRole: 'customer' }
Â  Â  });

Â  Â  dialogRef.afterClosed().subscribe(result => {
Â  Â  Â  Â  if (result === true) {
Â  Â  Â  Â  Â  Â  Â console.log('Password change succeeded.');
Â  Â  Â  Â  }
Â  Â  });
Â  }

Â  logout(): void {
Â  Â  this.authService.logout(); 
Â  Â  this.isDropdownOpen = false;
Â  Â  this.router.navigate(['/login']);
Â  }
}