// src/app/core/services/user/user.service.ts

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { BehaviorSubject, Observable, tap } from 'rxjs'; 
import { map } from 'rxjs/operators';

// ----------------------------------------------------------------------
// --- 1. INTERFACE DEFINITIONS ---
// ----------------------------------------------------------------------

// 1. DTO for pre-filling the Loan Application form
export interface CustomerDetailsResponse {
Â  Â  id: number;
Â  Â  fullName: string;
Â  Â  knNumber: string;
Â  Â  gender: string;
Â  Â  mobileNumber: string;
Â  Â  emailId: string;
Â  Â  kycVerified: boolean;
Â  Â  bankName: string;
Â  Â  accountHolderName: string;
Â  Â  accountNumber: string;
Â  Â  ifscCode: string;
Â  Â  branchName: string;
}

// 2. Payload DTO for submitting the loan application
export interface LoanApplicationPayload {
Â  Â  customerId: number | null;
Â  Â  amountSeeking: number;
Â  Â  itemType: string;
Â  Â  numberOfItems: number;
Â  Â  purity: string;
Â  Â  netWeight: number;
Â  Â  photos: File | null;
Â  Â  acknowledgement: boolean;
}

// 3. Response DTO for a successful loan submission
export interface LoanSubmitResponse {
Â  Â  message: string;
Â  Â  rid: string;
}

// 4. Loan Interface (Used for Dashboard tables - Customer & Employee)
export interface Loan {
Â  Â  id: string; Â  Â  Â // maps to loanapplication.rid
Â  Â  type: string; Â  Â // maps to asset.type
Â  Â  date: string; Â  Â // maps to loanapplication.created_at
Â  Â  
Â  Â  // FIELDS FOR EMPLOYEE DASHBOARD
Â  Â  kn: string; Â  Â  Â // Customer KN Number
Â  Â  name: string; Â  Â // Customer Full Name
    
    // FIX: Final approved amount (nullable until Step 3 is complete)
Â  Â  finalValue: number | null; 

    rejectionReason: string | null;

Â  Â  // EXPANDED Statuses for the full workflow
Â  Â  status: 'PENDING' | 'VERIFIED' | 'EVALUATED' | 'REJECTED' | 'REJECTED_FOR_REVIEW' | 'DISBURSED' | 'GOLD_SUBMITTED' | 'ACCEPTED' 
Â  Â  Â  Â  Â  Â  | 'Pending' | 'Verified' | 'Evaluated' | 'Accepted' | 'Rejected' | 'Disbursed'
Â  Â  Â  Â  Â  Â  | 'Offer Rejected' Â  Â 
Â  Â  Â  Â  Â  Â  | 'Offer Made' Â  Â  Â  Â 
Â  Â  Â  Â  Â  Â  | 'Offer Accepted' Â  Â 
Â  Â  Â  Â  Â  Â  | 'OFFER_MADE' 
Â  Â  Â  Â  Â  Â  | 'OFFER_ACCEPTED' 
Â  Â  Â  Â  Â  Â  | 'OFFER_REJECTED'
            | 'PAID_FINE'             // <-- FIX: Added missing status
            | 'GOLD_COLLECTED';
}

// 5. Loan Details Response (Used for Employee Loan Details Page)
export interface LoanDetailsResponse {
Â  Â  rid: string;
Â  Â  date: string;
Â  Â  status: Loan['status'];
Â  Â  amount: number; 
Â  Â  finalValue: number | null; 
    rejectionReason: string | null;
Â  Â  
Â  Â  applicant: { fullName: string; knNumber: string; mobileNumber: string; emailId: string; };
Â  Â  asset: { itemType: string; numberOfItems: number; purity: string; netWeight: string; qualityIndex: number | null; };
Â  Â  financial: { bankName: string; accountHolderName: string; accountNumber: string; ifscCode: string; };
}

// 6. Customer Profile (Used by Auth Guard and Customer Dashboard)
export interface CustomerProfile {
Â  Â  name: string;
Â  email: string;
Â  mobileNumber: string;
Â  
Â  kycStatus: boolean; 
Â  kycVerified: boolean; 

Â  knNumber: string | null;
Â  aadhaar: string | null;
Â  panCard: string | null;
}

// ----------------------------------------------------------------------
// --- 2. SERVICE IMPLEMENTATION ---
// ----------------------------------------------------------------------

@Injectable({
Â  providedIn: 'root'
})
export class UserService {
Â  Â  private apiUrl = 'http://localhost:8080/api'; 
Â  Â  private customerUrl = `${this.apiUrl}/customer`; 

Â  Â  private _knNumber = new BehaviorSubject<string | null>(null);
Â  Â  public knNumber$ = this._knNumber.asObservable();
Â  Â  
Â  Â  private initialLoans: Loan[] = [];
Â  Â  private _loans = new BehaviorSubject<Loan[]>(this.initialLoans);
Â  Â  public loans$ = this._loans.asObservable();

Â  Â  constructor(private http: HttpClient) { }

Â  Â  // ----------------------------------------------------------------------
Â  Â  // CORE/EXISTING METHODS
Â  Â  // ----------------------------------------------------------------------

Â  Â  getUserProfile(): Observable<CustomerProfile> {
Â  Â  Â  Â  const profileUrl = `${this.customerUrl}/profile`; 
Â  Â  Â  Â  return this.http.get<CustomerProfile>(profileUrl);
Â  Â  }

Â  Â  setKnNumber(kn: string | null): void {
Â  Â  Â  Â  this._knNumber.next(kn);
Â  Â  }

Â  Â  // Maps to: POST /api/customer/employee/loan/{rid}/status
Â  Â  updateLoanStatus(rid: string, newStatus: Loan['status'], rejectionReason?: string | null): Observable<any> {
Â  Â  Â  Â  const updateUrl = `${this.customerUrl}/employee/loan/${rid}/status`; 
Â  Â  Â  Â  
Â  Â  Â  Â  const payload = { 
Â  Â  Â  Â  Â  Â  newStatus: newStatus,
Â  Â  Â  Â  Â  Â  rejectionReason: rejectionReason || null
Â  Â  Â  Â  };

        // ðŸ’¡ CRITICAL FIX: Direct update of the local list, ensuring the rejectionReason is set/cleared correctly.
Â  Â  Â  Â  this._loans.next(this._loans.getValue().map(loan => {
Â  Â  Â  Â  Â  Â  Â if (loan.id === rid) {
Â  Â  Â  Â  Â  Â  Â  Â  Â return { 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â ...loan, 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â status: newStatus,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â // Set the new reason if it's a rejection, otherwise clear it.
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â rejectionReason: newStatus === 'REJECTED_FOR_REVIEW' ? (rejectionReason || null) : null
Â  Â  Â  Â  Â  Â  Â  Â  Â };
Â  Â  Â  Â  Â  Â  Â }
Â  Â  Â  Â  Â  Â  Â return loan;
Â  Â  Â  Â  Â }));

Â  Â  Â  Â  return this.http.post(updateUrl, payload);
Â  Â  }
        
    /**
     * Maps to POST /api/customer/loan/submit-gold/{rid} (Customer Action)
     */
    submitGold(rid: string): Observable<any> {
        const submitUrl = `${this.customerUrl}/loan/submit-gold/${rid}`;
        
        // Target status is GOLD_SUBMITTED
        const newStatus: Loan['status'] = 'GOLD_SUBMITTED';

        // Optimistic UI Update: Update status to GOLD_SUBMITTED immediately
        this._loans.next(this.getUpdatedLoanList(rid, newStatus));

        // The backend handler updateLoanStatusByCustomer does the validation (VERIFIED -> GOLD_SUBMITTED)
        return this.http.post(submitUrl, {}, { responseType: 'text' as 'json' });
    }

Â  Â  // Helper function for local state update
Â  Â  private getUpdatedLoanList(rid: string, newStatus: Loan['status']): Loan[] {
Â  Â  Â  Â  return this._loans.getValue().map(loan => 
Â  Â  Â  Â  Â  Â  loan.id === rid ? { ...loan, status: newStatus } : loan
Â  Â  Â  Â  );
Â  Â  }

Â  Â  // ----------------------------------------------------------------------
Â  Â  // LOAN APPLICATION & EMPLOYEE WORKFLOW METHODS
Â  Â  // ----------------------------------------------------------------------
Â  Â  
Â  Â  getPrefillDetails(): Observable<CustomerDetailsResponse> {
Â  Â  Â  Â  const prefillUrl = `${this.customerUrl}/loan-details-prefill`;
Â  Â  Â  Â  return this.http.get<CustomerDetailsResponse>(prefillUrl);
Â  Â  }

Â  Â  // src/app/core/services/user/user.service.ts (Corrected addLoan method)

// ... existing imports ...

    addLoan(payload: LoanApplicationPayload): Observable<LoanSubmitResponse> {
        const loanUrl = `${this.customerUrl}/loan-application`;
        
        // CRITICAL FIX 1: The responseType is correctly set to 'text' to handle the backend's plain string response.
        return this.http.post(loanUrl, payload, { responseType: 'text' as 'json' }).pipe(
            map(response => {
                const message = response as unknown as string;
                
                // CRITICAL FIX 2: Use regex to extract the Reference ID (RID) from the success message string.
                // It searches for "Reference ID: GLN-XXXXXX" or just the "GLN-XXXXXX" pattern.
                const ridMatch = message.match(/RID:\s*([A-Z0-9-]+)|(GLN-[A-Z0-9-]+)$/i);
                
                const extractedRid = ridMatch ? (ridMatch[1] || ridMatch[2]) : 'N/A';

                const loanSubmitResponse: LoanSubmitResponse = {
                    message: message,
                    rid: extractedRid
                };
                
                // CRITICAL FIX 3: Optimistic UI update using the NOW-DEFINED extractedRid.
                const newLoan: Loan = {
                    id: loanSubmitResponse.rid, // Use the extracted RID
                    type: 'Gold Loan (New)',
                    date: new Date().toISOString().split('T')[0],
                    status: 'PENDING',
                    kn: 'KN_NewApp', 
                    name: 'New Applicant',
                    finalValue: null,
                    rejectionReason: null
                };
                
                // Update the local state BehaviorSubject
                this._loans.next([...this._loans.getValue(), newLoan]);
                
                // Return the structured response DTO with the extracted RID
                return loanSubmitResponse;
            })
        );
    }

Â  Â  // Maps to: GET /api/customer/loans (Fetches all loans for the authenticated user)
Â  Â  getCustomerLoans(): Observable<Loan[]> {
Â  Â  Â  Â  const loansUrl = `${this.customerUrl}/loans`;
Â  Â  Â  Â  
Â  Â  Â  Â  return this.http.get<Loan[]>(loansUrl).pipe(
Â  Â  Â  Â  Â  Â  tap((realLoans: Loan[]) => {
Â  Â  Â  Â  Â  Â  Â  Â  this._loans.next(realLoans);
Â  Â  Â  Â  Â  Â  })
Â  Â  Â  Â  );
Â  Â  }

Â  Â  // Maps to: GET /api/customer/employee/loans
Â  Â  getAllLoanApplications(): Observable<Loan[]> {
Â  Â  Â  Â  const loansUrl = `${this.customerUrl}/employee/loans`; 
Â  Â  Â  Â  
Â  Â  Â  Â  return this.http.get<Loan[]>(loansUrl).pipe(
Â  Â  Â  Â  Â  Â  tap((allLoans: Loan[]) => {
Â  Â  Â  Â  Â  Â  Â  Â  this._loans.next(allLoans);
Â  Â  Â  Â  Â  Â  })
Â  Â  Â  Â  );
Â  Â  }
Â  Â  
Â  Â  // Maps to: GET /api/customer/employee/loan/{rid}
Â  Â  getLoanDetailsById(rid: string): Observable<LoanDetailsResponse> {
Â  Â  Â  Â  const detailUrl = `${this.customerUrl}/employee/loan/${rid}`;
console.log('Fetching Loan Details URL:', detailUrl);
Â  Â  Â  Â  return this.http.get<LoanDetailsResponse>(detailUrl);
Â  Â  }

    getCustomerLoanDetailsById(rid: string): Observable<LoanDetailsResponse> {
        // Assume the backend has a customer-secured endpoint for their own loan details
        const detailUrl = `${this.customerUrl}/loan/${rid}`; 
        return this.http.get<LoanDetailsResponse>(detailUrl);
    }

Â  Â  // Maps to: POST /api/customer/employee/loan/{rid}/disburse (Step 6)
Â  Â  disburseLoan(rid: string): Observable<any> {
Â  Â  Â  Â  const disburseUrl = `${this.customerUrl}/employee/loan/${rid}/disburse`;
Â  Â  Â  Â  
Â  Â  Â  Â  // Optimistic UI Update
Â  Â  Â  Â  this._loans.next(this.getUpdatedLoanList(rid, 'DISBURSED'));
Â  Â  Â  Â  
Â  Â  Â  Â  return this.http.post(disburseUrl, {});
Â  Â  }

    // Maps to: POST /api/customer/employee/loan/{rid}/evaluate
Â  Â  submitEvaluationData(rid: string, finalValue: number, qualityIndex: number): Observable<any> {
Â  Â  Â  Â  const evaluateUrl = `${this.customerUrl}/employee/loan/${rid}/evaluate`;
Â  Â  Â  Â  const payload = {
Â  Â  Â  Â  Â  Â  finalValue: finalValue,
Â  Â  Â  Â  Â  Â  qualityIndex: qualityIndex
Â  Â  Â  Â  };
Â  Â  Â  Â  return this.http.post(evaluateUrl, payload).pipe(
Â  Â  Â  Â  Â  Â  tap(() => {
Â  Â  Â  Â  Â  Â  Â  Â  // Optimistic update to EVALUATED
Â  Â  Â  Â  Â  Â  Â  Â  this._loans.next(this.getUpdatedLoanList(rid, 'EVALUATED'));
Â  Â  Â  Â  Â  Â  })
Â  Â  Â  Â  );
Â  Â  }

    recordOfferDecision(rid: string, newStatus: Loan['status']): Observable<any> {
        const updateUrl = `${this.customerUrl}/loan/offer-decision/${rid}`; 
        const payload = { newStatus: newStatus };

        // Optimistic UI Update (for immediate feedback)
        this._loans.next(this.getUpdatedLoanList(rid, newStatus)); 
        
        return this.http.post(updateUrl, payload, { responseType: 'text' as 'json' });
    }

    payFine(rid: string, fineAmount: number): Observable<any> {
        const fineUrl = `${this.customerUrl}/loan/pay-fine/${rid}`;
        const payload = { fineAmount: fineAmount }; 
        
        // Optimistic UI Update to PAID_FINE
        this._loans.next(this.getUpdatedLoanList(rid, 'PAID_FINE')); 
        
        return this.http.post(fineUrl, payload, { responseType: 'text' as 'json' });
    }
    
    // ðŸ’¡ NEW METHOD: Maps to POST /api/customer/employee/loan/{rid}/collect-gold
    collectGold(rid: string): Observable<any> {
        // NOTE: Assume this uses the employee-only endpoint defined elsewhere, e.g., EmployeeActionsController
        const collectUrl = `${this.customerUrl}/employee/loan/${rid}/collect-gold`; 
        
        // Optimistic UI Update to GOLD_COLLECTED (or final state)
        this._loans.next(this.getUpdatedLoanList(rid, 'GOLD_COLLECTED'));

        return this.http.post(collectUrl, {});
    }

    reApplyLoan(rid: string, newStatus: Loan['status']): Observable<any> {
Â  Â  Â  Â  // ðŸ’¡ FIX: Use the customer-specific loan update URL
Â  Â  Â  Â  const reApplyUrl = `${this.customerUrl}/loan/${rid}/status`; 
Â  Â  Â  Â  
Â  Â  Â  Â  const payload = { 
Â  Â  Â  Â  Â  Â  newStatus: newStatus 
Â  Â  Â  Â  };

        // ðŸ’¡ CRITICAL FIX: Explicitly set status to PENDING and clear rejectionReason
Â  Â  Â  Â  this._loans.next(this._loans.getValue().map(loan => 
Â  Â  Â  Â  Â  Â  loan.id === rid ? { 
                ...loan, 
                status: newStatus, 
                rejectionReason: null 
            } : loan
Â  Â  Â  Â  ));
Â  Â  Â  Â  
Â  Â  Â  Â  return this.http.post(reApplyUrl, payload, { responseType: 'text' as 'json' });
Â  Â  }
}